ECOOP 2024 Paper #22 Reviews and Comments
===========================================================================
Paper #22 Pipit on the Post: proving pre- and post-conditions of reactive
systems


Review #22A
===========================================================================

Paper summary
-------------
This paper is concerned with the verification of reactive systems.  It
introduces a reactive language similar to Lustre embedded in F* that
is amenable to verification and execution on real-time systems.  The
verification strategy involves translating programs into a transition
system whose safety can be shown using k-inductive proof arguments,
and which allows rely-guarantee style contracts to be specified.

Soundness
---------
3. Acceptable

Justification and comments on soundness
---------------------------------------
The paper presents all necessary formal definitions, typing rules,
dynamic semantics, a "checked" semantics that captures the evaluation
of an expression under a streaming history that satisfies a
rely-guarantee contract, relevant soundness results, a formalization
of abstract and executable transition systems, and equivalence proofs
that relates an executable transition system with the original
semantics.  The abstract refers to the use of k-induction to
automatically prove properties about the transition system, but no
details are actually provided in the text on this methodology.

Significance
------------
3. Acceptable

Justification and comments on significance
------------------------------------------
Advances in verifying complex reactive systems like the CAN driver
case study discussed in the paper is important.  However, other than
the use of followed-by and a streaming type that are clearly relevant
to the problem setting, much of the paper's formalism and technical
development (i.e., lemma instantiation, rely/guarantee contract
specification, abstract/concrete transition system, etc.) are not
particularly tied to reactive programming.  If they are, the insights
that highlight these connections are not well-developed in the
narrative.  The lack of examples (other than the motivating example in
Sec. 2) makes it hard to relate how the language and formalism are
particularly relevant to a realtime reactive setting.  Indeed, much of
the technical material is devoted to explaining various semantic
components, at the expense of providing rationale and intuition relevant
to reactive systems programming.

Presentation
------------
2. Weak

Justification and comments on presentation
------------------------------------------
While the various semantic formalisms and judgements are explained
well in isolation, the paper has lots of moving parts whose
integration is not explained as well as it might.  Other than the
initial motivating example, the bulk of the technical presentation is
given with no examples.  The paper also does not provide much
motivatation or intuition for its approach, nor does it set its
contributions in the context of other work in this space, except for a
brief comparison in Sec. 7.  Consequently, I think non-experts in
reactive programming (or F*) would find it difficult to appreciate the
overall approach and results.

Reviewer expertise
------------------
3. Knowledgeable



Review #22B
===========================================================================

Paper summary
-------------
The paper presents PipIt, an embedding of a Lustre-like language in F*. It supports verified lowering to C, using prior work on Low*. It is able to leverage F*’s proof machinery to encode richer properties than are possible with model-checking. There is some extra proof burden placed on the user. Certain features like imperative arrays are unsupported.

The dynamic semantics of PipIt is quite unusual for this area. There is a big-step semantics, used to reason equationally, and a checked semantics that checks if properties hold of a history.

Soundness
---------
4. Strong

Justification and comments on soundness
---------------------------------------
I don’t have reason to doubt the technical correctness of the work. The work is a little incomplete, since it doesn’t support imperative arrays. The evaluation discusses two case studies. (One is already published.) The case study contributed in this paper is a partial implementation of TTCAN. The paper compares verification running time of PipIt and the Kind2 model checker. Pipit is of course a lot faster. But, there is detail missing:

1. Are Pipit and Kind2 verifying exactly the same properties? If not, why not?
2. The paper reports the total file size is about the same. However, it would be helpful to get a sense of how much of the Pipit is proofs vs runnable code.

Significance
------------
4. Strong

Justification and comments on significance
------------------------------------------
The paper argues compelling that this is an important problem. It isn’t quite complete yet, but I think it’s a very solid first step.

Presentation
------------
3. Acceptable

Justification and comments on presentation
------------------------------------------
The paper is a little impenetrable at first and can be improved. For example, the description of CAN that appears early is very terse, but there is a detailed and understandable description in Evaluation.

Reviewer expertise
------------------
3. Knowledgeable



Review #22C
===========================================================================

Paper summary
-------------
This paper introduces Pipit, a reactive language tailored for verifying real-time control systems, renowned for their critical nature. Given the high stakes involved, robust safety property verification tools are imperative. Unfortunately, existing model checkers often operate independently of concrete programming languages, resulting in potential inconsistencies. Pipit offers a solution by presenting a high-level language that reconciles property validation and executable code. It provides a verified mapping, ensuring semantic preservation between the executable transition system and the abstraction level.

Soundness
---------
5. Very strong

Justification and comments on soundness
---------------------------------------
The paper demonstrates clear and comprehensible writing, making Pipit's syntax and semantics readily understandable. Additionally, it provides well-defined syntax and semantics for the transition systems. A comparative analysis with Kind2 illustrates Pipit's superior scalability, further solidifying its effectiveness in real-world applications.

Significance
------------
5. Very strong

Justification and comments on significance
------------------------------------------
The concise introduction effectively outlines the core issue addressed in the paper, while Section 7 provides an in-depth analysis of related work, highlighting Pipit's distinctive features among state-of-the-art approaches. In my humble opinion, I find the most intriguing contribution to be the end-to-end verified workflow, seamlessly transitioning from F* to concrete C implementation. This methodology not only furnishes an abstract transition system for property verification via model checking but also showcases Pipit's practical applicability in real-world scenarios.

Presentation
------------
4. Strong

Justification and comments on presentation
------------------------------------------
The paper's high level of technical detail instills confidence in its soundness. However, it may also present a barrier to entry for readers less versed in the field. Sections 1 and 2 could benefit from concrete examples to elucidate the concepts discussed, perhaps using a single, illustrative example to demonstrate each step outlined in Figure 2. Section 6 lacks clarity on certain aspects, such as the definitions of "wall-clock" and "user-time," which could be explained for better comprehension. Additionally, while the results are presented, they could be better emphasised within the text. For instance, it's mentioned that Kind2 struggled to verify arrays of size 64, but it would be beneficial to explicitly state Pipit's capabilities in handling larger sizes, perhaps by adding a row or two to Figure 11, showcasing runtime exceptions for Kind2 and values for Pipit. This would provide readers with a clearer understanding of Pipit's comparative strengths.

Reviewer expertise
------------------
1. No familiarity



Author Response by Author [Amos Robinson <amos.robinson@gmail.com>]
---------------------------------------------------------------------------
# Outline

We thank the reviewers for their insightful reviews.
A common criticism is the lack of intuition and examples given in the technical presentation, and the lack of context given to motivate the technical development.
We are currently three pages under the page limit; we believe that we have sufficient space and time to address this issue and propose to add further explanations and examples.

Reviewer A observed that we are missing the key definition of k-induction.
We propose to include a description of this in section 4.

Reviewers B and C observed that the evaluation which compares to Kind2 is lacking some critical details.
We propose to expand this section to answer the reviewers' questions.

Additionally, we propose to incorporate the now-finished proof of entailment (Figure 2, edge labelled $\not\vdash$) which shows that proof obligations on the abstract system agree with the checked semantics.
This proof was in-progress at the time of the submission, and is now completed.
The proof exposed some small issues which we also propose to amend in the paper formalism.
We believe that this change strengthens the paper and brings us closer to the long-term goal of an end-to-end verified workflow.


# Proposed changes to address reviewer comments
Concretely, we propose to make the following changes to address reviewer comments.
We describe the proposed changes to include the newly-finished proofs separately at the end of this document.

## Section 2: time-triggered networks

* provide a better description of the TTCAN protocol and driver, as the current one is too terse. It may make sense to move some of the description of the driver from S6 to S2.

## Section 3: core language

* include example of checked semantics for both valid and invalid programs
* include example contract to highlight the streaming / reactive aspects of rely-guarantee contracts

## Section 4: abstract transition systems

* include example of abstract transition system, eg showing transition system of `count_when` program
* include example with contract instantiation to highlight abstraction semantics
* add subsection describing induction and k-induction

## Section 5: executable transition systems

* include example of translated executable transition system
* describe the structure of the generated C code, and highlight how it can be executed in a real-time (streaming) environment

## Section 6: Evaluation
Expand Kind2 evaluation:
* describe encoding issues and minor differences between properties in both systems
* include comparison of required proof size vs runnable code
* clarify wall-clock vs user-time in Figure 11
* expand Figure 11 to show Kind2 timeout on larger arrays (eg up to 128)

# Answers to questions

## Reviewer B

Relating to section 6 on evaluation, reviewer B asks:

> 1. Are Pipit and Kind2 verifying exactly the same properties? If not, why not?

Yes, the properties and proofs are almost the same, except for some encoding issues.
F* supports unbounded natural numbers, while Kind2 only supports integers or fixed-bounded integers, so we need some extra nonnegative conditions in some places.
The `next` function to find the next active trigger is naturally recursive, which requires a rather cumbersome encoding with a temporary array in the Kind2 version.
(Arrays are the only way to express loops / iteration within a single time-step in Kind2.)
We also encode the lemma `lemma_can_reach_next` in Kind2 as a function with a contract: the actual proof of the lemma is handled by the SMT solver in both cases, but explicitly instantiating the lemma with the right arguments is the important part.
This lemma encoding would have a slight runtime overhead if we were to compile and execute it, but it is sufficient for a verification-only example.

> 2.  The paper reports the total file size is about the same. However, it would be helpful to get a sense of how much of the Pipit is proofs vs runnable code.

After stripping whitespace and comments, the Pipit version is 103 lines of code, while the Kind2 version is 146 lines of code.
I'd like to add a disclaimer, however, that while Lustre is inherently a little bit more verbose, the style of Lustre used also favours shorter lines.

For actual runnable code, including type definitions and type signatures, Pipit has 23 lines, while Kind2 has 44 lines.
The majority of the remainder is the description of exactly what is required for a valid schedule (35 for Pipit, 45 Kind2), and the lemma and invariants (17 for Pipit, 47 for Kind2).

It's important to note that, in both cases, the proofs apply to an arbitrary valid schedule.
If we wanted to check for a concrete schedule, we wouldn't need the definition of what constitutes a valid schedule, and both programs would be a lot shorter.

For the paper, we will attempt to unify the whitespace style between the two versions before performing a similar analysis.

> The evaluation discusses two case studies. (One is already published.)

As a small remark, we should note a mistake in the bibliography: that citation (38) refers to an extended abstract that is not "officially published" in the workshop proceedings.
We will amend it to specify that it is an extended abstract.

# Proposed changes to include proof of entailment
In addition to the above changes to address reviewer comments, we would also like to expand the paper to include the proof of entailment and resolve the issues it exposed.
The changes do not affect the structure of the paper and do not diminish the claims at all.

## Section 3: core language

Figure 2:
* Figure 2 and its accompanying description should describe the proof of entailment as finished rather than future work.

Checked semantics:
* The checked semantics rule for `let` needs to change.  The rule for `let x = e1 in e2` performs unfolding then checks `e2[x := e1]`; however, if the name `x` is not mentioned, then `e1` will be removed as dead code without being checked.  The amended rule checks e1 explicitly.

## Section 4: abstract transition system
In the translation of contracts to abstract transition systems, the rely clause for contracts is missing an implication.
In the submission, the translated assumptions for a contract lets us assume the contract's guarantee's assumptions hold.
However, these assumptions only hold if the contract's rely itself holds.
Concretely, in Figure 9, third-last line:
* `[| e_g |]_{rely}(i, f, s)` becomes `([| e_r|]_{value}(i, f, s) ==> [| e_g |]_{rely}(i, f, s))`



Comment @A1 by Administrator
---------------------------------------------------------------------------
The reviewers agree that this is valuable work and converged on a revision decision. Please implement the list of changes that you propose in your rebuttal.

In addition the reviewer's questions:

- Are Pipit and Kind2 verifying exactly the same properties? If not, why not?

- The paper reports the total file size is about the same. However, it would be helpful to get a sense of how much of the Pipit is proofs vs runnable code.

were directly answered in the rebuttal. it would be great if you could also add a clarification in the paper.
